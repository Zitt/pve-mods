diff --git a/usr/share/pve-manager/touch/pvemanager-mobile.js b/../pvemanager-mobile.js
index d19b4f8..716650f 100644
--- a/usr/share/pve-manager/touch/pvemanager-mobile.js
+++ b/../pvemanager-mobile.js
@@ -5165,56 +5165,74 @@ Ext.define('PVE.Datacenter', {
 
 	me.reload();
     },
 
 });
 
 Ext.define('PVE.NodeInfo', {
     extend: 'Ext.Component',
     alias: 'widget.pveNodeInfo',
 
     config: {
 	style: 'background-color: white;',
 	styleHtmlContent: true,
 	data: [],
 	tpl: [
 	    '<table style="margin-bottom:0px;">',
 	    '<tr><td>Version:</td><td>{pveversion}</td></tr>',
 	    '<tr><td>Memory:</td><td>{[this.meminfo(values)]}</td></tr>',
 	    '<tr><td>CPU:</td><td>{[this.cpuinfo(values)]}</td></tr>',
 	    '<tr><td>Uptime:</td><td>{[Proxmox.Utils.format_duration_long(values.uptime)]}</td></tr>',
+	    '<tr><td>CPU temp:</td><td>{[this.cputemp(values)]}</td></tr>',
+	    '<tr><td>PCH temp:</td><td>{[this.pchtemp(values)]}</td></tr>',
+	    '<tr><td>NVMe1 temp:</td><td>{[this.nvme1temp(values)]}</td></tr>',
+	    '<tr><td>NVMe2 temp:</td><td>{[this.nvme2temp(values)]}</td></tr>',
+	    '<tr><td>HD1 temp:</td><td>{[this.hd1temp(values)]}</td></tr>',
+	    '<tr><td>HD2 temp:</td><td>{[this.hd2temp(values)]}</td></tr>',
 	    '</table>',
 	    {
 		meminfo: function(values) {
 		    var d = values.memory;
 		    if (!d) {
 			return '-';
 		    }
 		    return Proxmox.Utils.format_size(d.used || 0) + " of " + Proxmox.Utils.format_size(d.total);
 		},
 		cpuinfo: function(values) {
 		    if (!values.cpuinfo) {
 			return '-';
 		    }
 		    var per = values.cpu * 100;
 		    return per.toFixed(2) + "% (" + values.cpuinfo.cpus + " CPUs)";
 		},
+		rendertemp: function(temp) {
+			if (!temp) {
+				return '-';
+			}
+			return temp.used.toFixed(1) + '°C (crit: ' + temp.total.toFixed(1) + '°C)';
+		},
+		cputemp: function(values) { return this.rendertemp(values.cputemp); },
+		pchtemp: function(values) { return this.rendertemp(values.pchtemp); },
+		nvme1temp: function(values) { return this.rendertemp(values.nvme1temp); },
+		nvme2temp: function(values) { return this.rendertemp(values.nvme2temp); },
+		hd1temp: function(values) { return this.rendertemp(values.hd1temp); },
+		hd2temp: function(values) { return this.rendertemp(values.hd2temp); },
 	    },
 	],
     },
 });
 
 Ext.define('PVE.NodeSummary', {
     extend: 'PVE.Page',
     alias: 'widget.pveNodeSummary',
 
     statics: {
 	pathMatch: function(loc) {
 	    return loc.match(/^nodes\/([^\s/]+)$/);
 	},
     },
 
     nodename: undefined,
 
     config: {
 	items: [
 	    {
@@ -5311,60 +5329,86 @@ Ext.define('PVE.NodeSummary', {
 	    failure: error_handler,
 	});
 
 	Proxmox.Utils.API2Request({
 	    url: '/nodes/' + me.nodename + '/qemu',
 	    method: 'GET',
 	    success: function(response) {
 		var d = response.result.data;
 		d.forEach(function(el) { el.type = 'qemu'; el.nodename = me.nodename; });
 		me.store.each(function(rec) {
 		    if (rec.get('type') === 'qemu') {
 			rec.destroy();
 		    }
 		});
 		me.store.add(d);
 	    },
 	    failure: error_handler,
 	});
     },
 
+	autoRefreshTask: null,
+	setMenuItems: function() {
+	var me = this;
+	if (me.autoRefreshTask === null) {
+		var refreshButton = {
+			text: gettext('Enable Auto-refresh'),
+			handler: function() {
+				me.autoRefreshTask = setInterval(function() { me.reload(); }, 3000);
+				me.setMenuItems();
+			}
+		}
+	} else {
+		var refreshButton = {
+			text: gettext('Disable Auto-refresh'),
+			handler: function() {
+				clearInterval(me.autoRefreshTask);
+				me.autoRefreshTask = null;
+				me.setMenuItems();
+			}
+		}
+	};
+
+	me.down('pveMenuButton').setMenuItems([
+		{
+		text: gettext('Tasks'),
+		handler: function() {
+			PVE.Workspace.gotoPage('nodes/' + me.nodename + '/tasks');
+		},
+		},
+		refreshButton,
+	]);
+	},
+
     initialize: function() {
 	var me = this;
 
 	var match = me.self.pathMatch(me.getAppUrl());
 	if (!match) {
 	    throw "pathMatch failed";
 	}
 
 	me.nodename = match[1];
 
 	me.down('titlebar').setTitle(gettext('Node') + ': ' + me.nodename);
 
-	me.down('pveMenuButton').setMenuItems([
-	    {
-		text: gettext('Tasks'),
-		handler: function() {
-		    PVE.Workspace.gotoPage('nodes/' + me.nodename + '/tasks');
-		},
-	    },
-	]);
+	me.setMenuItems();
 
 	me.store = Ext.create('Ext.data.Store', {
 	    fields: ['name', 'vmid', 'nodename', 'type', 'memory', 'uptime', 'mem', 'maxmem', 'cpu', 'cpus'],
 	    sorters: ['vmid'],
 	    grouper: {
 		groupFn: function(record) {
 		    return record.get('type');
 		},
 	    },
 	});
 
 	var list = me.down('list');
 	list.setStore(me.store);
 
 	me.reload();
 
 	this.callParent();
     },
 });
 Ext.define('PVE.MigrateBase', {
